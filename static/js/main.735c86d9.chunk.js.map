{"version":3,"sources":["Context/BillContext.js","Component/AddBills/AddBills.js","Component/Billslist/Billslist.js","Component/Billtotal/Billtotal.js","Component/BillOptions/BillOptions .js","Component/Editbills/Editbills.js","Component/App/App.js","serviceWorker.js","index.js"],"names":["BillContext","createContext","BillProvider","children","useState","bills","setbills","costinterval","setcostinterval","editModeEnabled","setEditModeEnabled","useEffect","JSON","parse","localStorage","getItem","console","log","Provider","value","updatebills","bill","updatedbills","setItem","stringify","editbills","billtoupdate","billsfiltered","filter","title","sort","a","b","toUpperCase","order","deleteBill","billToDelete","updatedBills","AddBills","newBillTitle","setnewBillTitle","newBillCost","setnewBillCost","useContext","className","placeholder","type","onChange","e","target","onClick","costValid","Number","parseFloat","split","find","char","Valid","alert","monthlyCost","enabled","Billslist","map","index","key","checked","Billtotal","moneytransform","cost","reduce","acc","val","toFixed","BillOptions","innerText","Editbills","editBill","billIndex","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.735c86d9.chunk.js","sourcesContent":["import React,{createContext, useEffect, useState} from 'react';\r\n\r\nconst BillContext = createContext();\r\n\r\nconst BillProvider = ({children})=>{\r\n\r\n    const [bills, setbills] = useState([])\r\n    const [costinterval, setcostinterval] = useState('Monthly'); \r\n    const [editModeEnabled, setEditModeEnabled] = useState(false);   \r\n\r\n    useEffect(() => {\r\n      setbills(JSON.parse(localStorage.getItem('bills')) || []);\r\n    }, [setbills])\r\n\r\n    useEffect(()=>{\r\n        console.log(bills)\r\n    }, [bills])\r\n\r\n    const updatebills = (bill) =>{\r\n    const updatedbills = [...bills, bill];\r\n    localStorage.setItem('bills', JSON.stringify(updatedbills))\r\n    setbills(updatedbills)\r\n    }\r\n\r\n    const order=(bills)=>{\r\n        return bills.sort((a,b)=>\r\n            a.title.toUpperCase() < b.title.toUpperCase() ? -1 : 0)\r\n    }\r\n\r\n    const editbills =(billtoupdate)=>{\r\n        const billsfiltered = bills.filter((bills)=>bills.title !== billtoupdate.title)\r\n        const updatedbills = order( [\r\n       ...billsfiltered,\r\n           billtoupdate\r\n        ])\r\n        console.log(\"updatedbills\",updatedbills)\r\n        localStorage.setItem('bills', JSON.stringify(updatedbills))\r\n        setbills(updatedbills)\r\n    }\r\n    const deleteBill = (billToDelete) => {\r\n        const updatedBills = bills.filter((bill) => bill.title !== billToDelete.title);\r\n        localStorage.setItem('bills', JSON.stringify(updatedBills))\r\n        setbills(updatedBills)\r\n      };\r\n    return(\r\n        <BillContext.Provider value={{\r\n            bills,\r\n            updatebills,\r\n            editbills,\r\n            costinterval,\r\n            setcostinterval,\r\n            setEditModeEnabled,\r\n            editModeEnabled,\r\n            deleteBill\r\n        }}>\r\n         {children}\r\n        </BillContext.Provider>\r\n    )\r\n}\r\nexport {\r\nBillContext,\r\nBillProvider\r\n};","import React, { useState, useContext } from 'react';\r\nimport { BillContext } from '../../Context/BillContext'\r\nimport \"./style.css\"\r\n \r\nconst AddBills = () => {\r\n    const [newBillTitle, setnewBillTitle]= useState('')\r\n    const [newBillCost, setnewBillCost]= useState('')\r\n\r\n    const {updatebills} = useContext(BillContext)\r\n      \r\n    const Valid = ()=>{\r\n    const costValid = newBillCost && Number.parseFloat(newBillCost)\r\n    const titleValid = newBillTitle && newBillTitle.split('').find(char=> char!='');\r\n    return titleValid && costValid\r\n    }\r\n    const clear = () =>{\r\n        setnewBillCost('')\r\n        setnewBillTitle('')\r\n    }\r\n    \r\n        return (\r\n            <div className=\"add-bill-container\">\r\n            <input className=\"add-bill-form-control form-control\"\r\n             placeholder=\"Enter Bill Title\" \r\n             type=\"text\" \r\n             value={newBillTitle} \r\n            onChange={(e)=> {setnewBillTitle(e.target.value)}}></input>\r\n\r\n            <input className=\"add-bill-form-control form-control\"\r\n             placeholder=\"Enter Bill Cost\" \r\n             type=\"number\" \r\n             value={newBillCost} \r\n            onChange={(e)=> {setnewBillCost(e.target.value)}}></input>\r\n\r\n            <button className=\"add-bill-form-control btn btn-primary\"\r\n             onClick={()=>{\r\n                 if(Valid()){\r\n                     updatebills({title:newBillTitle,monthlyCost:newBillCost, enabled: true})\r\n                     clear();\r\n                 }\r\n                 else{\r\n                     alert(\"fields cant be blank\")\r\n                 }\r\n             }}\r\n            >Add bills</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n \r\nexport default AddBills ;","import React,{useContext} from 'react';\r\nimport './style.css'\r\nimport { BillContext } from '../../Context/BillContext';\r\n \r\nconst Billslist = () =>{\r\n    const {bills, editbills, setEditModeEnabled}= useContext(BillContext)\r\n    return(\r\n       <div className=\"bill-list-container\">\r\n            <h6 className='edit-mode-btn' onClick={() => setEditModeEnabled(true)}>Edit</h6>\r\n           {\r\n            bills.map((bill,index)=>{\r\n                return(\r\n                    <div key={index} className=\"bill-list-row\">\r\n                        <input type=\"checkbox\" className=\"form-check-input\" checked={bill.enabled} onChange={()=> editbills({\r\n                                title:bill.title,\r\n                                monthlyCost:bill.monthlyCost,\r\n                                enabled:!bill.enabled\r\n                        })} ></input>\r\n                        <div className=\"bill-content\"></div> \r\n                        {bill.title}-{bill.monthlyCost}rupee\r\n                    </div>\r\n                )\r\n            })\r\n           }\r\n       </div>    \r\n    )\r\n}\r\nexport default Billslist","import React,{useContext} from 'react';\r\nimport './style.css'\r\nimport { BillContext } from '../../Context/BillContext';\r\n\r\nconst Billtotal = () => {\r\n    const {bills, costinterval} = useContext(BillContext)\r\n\r\n    const moneytransform =(cost)=>{\r\n    const monthlyCost = Number.parseFloat(cost);\r\n    switch(costinterval){\r\n          case 'Monthly':\r\n          return monthlyCost\r\n          case 'Yearly':\r\n          return monthlyCost * 12  \r\n          case 'Daily':\r\n          return monthlyCost*12 /365 \r\n          case 'Weekly':\r\n          return monthlyCost*12 /52\r\n          \r\n          default:\r\n              return 0\r\n    }\r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"bill-total-container\">\r\n          {costinterval} Bill Cost : \r\n          <span>\r\n              {\r\n                  bills.reduce((acc,val)=>{\r\n                      return val.enabled  ?  moneytransform(val.monthlyCost) + acc : acc\r\n                  },0).toFixed(2)\r\n              }\r\n              </span> \r\n        </div>\r\n        <div className=\"bill-total-container\">\r\n          {costinterval} Saved : \r\n          <span>\r\n              {\r\n                  bills.reduce((acc,val)=>{\r\n                      return !val.enabled  ?  moneytransform(val.monthlyCost) + acc : acc\r\n                  },0).toFixed(2)\r\n              }\r\n              </span> \r\n        </div>\r\n        </>\r\n    );\r\n}\r\n \r\n\r\n \r\nexport default Billtotal;","import React,{useContext} from 'react';\r\nimport './style.css'\r\nimport { BillContext } from '../../Context/BillContext';\r\n\r\nconst BillOptions = () => {\r\n    const { costinterval, setcostinterval } = useContext(BillContext);\r\n\r\n    return (\r\n      <div className='interval-option-container'>\r\n        <div className={costinterval === 'Daily' ? 'selected-interval' : 'interval'}\r\n          onClick={(e) => setcostinterval(e.target.innerText)}>\r\n          Daily\r\n        </div>\r\n        <div className={costinterval === 'Monthly' ? 'selected-interval' : 'interval'}\r\n          onClick={(e) => setcostinterval(e.target.innerText)}>\r\n          Monthly\r\n        </div>\r\n        <div className={costinterval === 'Yearly' ? 'selected-interval' : 'interval'}\r\n          onClick={(e) => setcostinterval(e.target.innerText)}>\r\n          Yearly\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n \r\n\r\n \r\nexport default BillOptions;","import React,{useContext} from 'react';\r\nimport './style.css'\r\nimport { BillContext } from '../../Context/BillContext';\r\n\r\nconst Editbills = () => {\r\n\r\n    const { bills, setEditModeEnabled, editBill, deleteBill } = useContext(BillContext);\r\n\r\n  return (\r\n    <div className='edit-bill-container'>\r\n      <h6 className='edit-mode-done-btn' onClick={() => setEditModeEnabled(false)}>\r\n        Done\r\n      </h6>\r\n      {\r\n        bills.map((bill, billIndex) => {\r\n          return(\r\n            <div key={billIndex} className='edit-bill-row'>\r\n              <div className='edit-bill-row-content'>\r\n                <div className='edit-bill-title'>{bill.title}</div>\r\n                <input className='edit-bill-cost-input'\r\n                  type='number'\r\n                  value={bill.monthlyCost}\r\n                  onChange={(e) => editBill({\r\n                    title: bill.title,\r\n                    enabled: bill.enabled,\r\n                    monthlyCost: e.target.value\r\n                  })}></input>\r\n                  <h6 onClick={() => deleteBill(bill)} className='delete-button'>DELETE</h6>\r\n              </div>\r\n              <hr></hr>\r\n            </div>\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n \r\n\r\n \r\nexport default Editbills;","import React,{useContext} from 'react';  \nimport './App.css';\nimport AddBills from '../AddBills/AddBills';\nimport { BillContext } from '../../Context/BillContext';\nimport Billslist from '../Billslist/Billslist'\nimport Billtotal from '../Billtotal/Billtotal'\nimport BillOptions from '../BillOptions/BillOptions '\nimport Editbills from '../Editbills/Editbills';\n\nconst App  = () =>{\n  const { editModeEnabled } = useContext(BillContext);\n\n  return (\n    <div className='bills-container'>\n      {\n        editModeEnabled ? <Editbills /> : <span><BillOptions /><AddBills /><Billtotal /><Billslist /></span>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Component/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BillProvider } from './Context/BillContext';\n\nReactDOM.render(\n  <React.StrictMode>\n  <BillProvider><App /></BillProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}